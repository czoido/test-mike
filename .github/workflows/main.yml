name: Testing Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Install docs dependencies
        run: pip install .[docs]
      - name: Build documentation
        run: mkdocs build --verbose

  releaseDraft:
    name: Create Release Draft
    if: github.ref == 'refs/heads/main'
    needs: [docs]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DRAFT_IDS=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.draft == true) | .id')

          if [[ -n "$DRAFT_IDS" ]]; then
            echo "Deleting old drafts..."
            echo "$DRAFT_IDS" | xargs -I '{}' gh api -X DELETE repos/${{ github.repository }}/releases/'{}'
          else
            echo "No old drafts found. Skipping delete step."
          fi

      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ env.VERSION }}" --draft --title "v${{ env.VERSION }}" --generate-notes


  deploy-dev-docs:
    needs: docs
    uses: ./.github/workflows/deploy-docs.yml
    with:
      version: dev
    permissions:
      contents: write
